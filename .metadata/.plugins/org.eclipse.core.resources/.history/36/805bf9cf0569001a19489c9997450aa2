package PayconiqRestAssuredBDDFramework.util;

import org.testng.annotations.Test;

import PayconiqRestAssuredBDDFramework.util.BasicAuthentication;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

import org.json.JSONException;
import org.json.JSONObject;
import org.testng.Assert;
import static io.restassured.RestAssured.*;

public class Base {
	
	static String username="rohit1212s";
	static String password="Winnner1";
	static String postAPIBody = "{\r\n" + "  \"description\": \"Hello World Examples\",\r\n" + "  \"public\": true,\r\n"
			+ "  \"files\": {\r\n" + "    \"hello_world_python.txt\": {\r\n"
			+ "      \"content\": \"Run `python hello_world.py` to print Hello World\"\r\n" + "    }\r\n"
			+ "  }\r\n" + "}";
	
    //Global Setup Variables
    public static String path; //Rest request path
 
    /*
    ***Sets Base URI***
    Before starting the test, we should set the RestAssured.baseURI
    */
    public static void setBaseURI (String baseURI){
        RestAssured.baseURI = baseURI;
    }
 
    /*
    ***Sets base path***
    Before starting the test, we should set the RestAssured.basePath
    */
    public static void setBasePath(String basePathTerm){
        RestAssured.basePath = basePathTerm;
    }
 
    /*
    ***Reset Base URI (after test)***
    After the test, we should reset the RestAssured.baseURI
    */
    public static void resetBaseURI (){
        RestAssured.baseURI = null;
    }
 
    /*
    ***Reset base path (after test)***
    After the test, we should reset the RestAssured.basePath
    */
    public static void resetBasePath(){
        RestAssured.basePath = null;
    }
 
    /*
    ***Sets ContentType***
    We should set content type as JSON or XML before starting the test
    */
    public static void setContentType (ContentType Type){
        given().contentType(Type);
    }
    
 
    public static Response setResponse(String baseURI) {
    	
    	RequestSpecBuilder builder = new RequestSpecBuilder();

		// Set API's Body
		builder.setBody(postAPIBody);
		// Setting content type as application/json
		builder.setContentType("application/json; charset=UTF-8");
		RequestSpecification requestSpec = builder.build();
		
		Response response = given().auth().preemptive().basic(username,password).spec(requestSpec).when()
				.post(baseURI);
		return response;
    }
    
    public static JSONObject getResponseBody(Response response) {
    	JSONObject JSONResponseBody = new JSONObject(response.body().asString());
    	return JSONResponseBody;
    }
}